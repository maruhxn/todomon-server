services:
  mysql:
    image: mysql:8.0
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: 1234  # MySQL root 계정의 비밀번호
      MYSQL_DATABASE: todomon         # 초기 생성할 데이터베이스 이름
      MYSQL_CHARSET: utf8mb4             # 기본 charset을 utf8mb4로 설정
      MYSQL_COLLATION: utf8mb4_unicode_ci # 기본 collation을 utf8mb4_unicode_ci로 설정
      TZ: Asia/Seoul
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-container
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - todomon-app1
      - todomon-app2
      - todomon-app3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-container
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
  #  cadvisor:
  #    image: gcr.io/cadvisor/cadvisor
  #    container_name: cadvisor
  #    volumes:
  #      - /:/rootfs:ro
  #      - /var/run:/var/run:rw
  #      - /sys:/sys:ro
  #      - /var/lib/docker/:/var/lib/docker:ro
  #      - /dev/disk/:/dev/disk:ro
  #    ports:
  #      - "8081:8080"
  #    networks:
  #      - todomon-network
  redis:
    image: "redis:latest"
    container_name: redis-container
    ports:
      - "6379:6379"  # Redis 기본 포트 매핑
    volumes:
      - redis-data:/data  # Redis 데이터를 유지할 볼륨

  todomon-app1:
    build: ./todomon-core
    container_name: todomon-app-container1
    ports:
      - "8080:8080"
      - "9290:9290"
    environment:
      TZ: Asia/Seoul
    volumes:
      - ./todomon-core/build/libs/todomon-app.jar:/app/todomon-app.jar  # JAR 파일을 컨테이너에 매핑
    depends_on:
      - mysql
      - redis

  todomon-app2:
    build: ./todomon-core
    container_name: todomon-app-container2
    ports:
      - "8081:8080"
      - "9291:9290"
    environment:
      TZ: Asia/Seoul
    volumes:
      - ./todomon-core/build/libs/todomon-app.jar:/app/todomon-app.jar  # JAR 파일을 컨테이너에 매핑
    depends_on:
      - mysql
      - redis

  todomon-app3:
    build: ./todomon-core
    container_name: todomon-app-container3
    ports:
      - "8082:8080"
      - "9292:9290"
    environment:
      TZ: Asia/Seoul
    volumes:
      - ./todomon-core/build/libs/todomon-app.jar:/app/todomon-app.jar  # JAR 파일을 컨테이너에 매핑
    depends_on:
      - mysql
      - redis


  todomon-batch:
    build: ./todomon-batch
    container_name: todomon-batch-container
    ports:
      - "8000:8000"
    environment:
      TZ: Asia/Seoul
    volumes:
      - ./todomon-batch/build/libs/todomon-batch.jar:/app/todomon-batch.jar  # JAR 파일을 컨테이너에 매핑
    depends_on:
      - mysql

  nginx:
    image: nginx:latest
    ports:
      - "80:80"  # 외부 포트 80을 Nginx의 80 포트로 매핑
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Nginx 설정 파일을 로드

  # === Kafka ===
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

networks:
  todomon-network:
    driver: bridge

volumes:
  mysql_data:
  grafana_data:
  redis-data:
